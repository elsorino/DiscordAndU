
protocol Ranking : 112 {
	enum RankingOrderCalc {
		STANDARD = 0,
		ORDINAL = 1
	}
	
	enum RankingMode {
		GLOBAL = 0,
		GLOBAL_AROUND_SELF = 1,
		SELF = 4
	}
	
	enum RankingStatFlags {
		RANKING_COUNT = 1,
		TOTAL_SCORE = 2,
		LOWEST_SCORE = 4,
		HIGHEST_SCORE = 8,
		AVERAGE_SCORE = 16,
		ALL = 31
	}

	struct RankingOrderParam {
		uint8 order_calc = 0;
		uint8 group_index = 255;
		uint8 group_num = 0;
		uint8 time_scope = 2;
		uint32 offset;
		uint8 count;
	}
	
	struct RankingRankData {
		pid pid;
		uint64 unique_id;
		uint32 rank;
		uint32 category;
		uint32 score;
		list<uint8> groups;
		uint64 param;
		buffer common_data;
		
		[nex.version >= 40000] {
			datetime update_time;
		}
	}
	
	struct RankingResult {
		list<RankingRankData> data;
		uint32 total;
		datetime since_time;
	}
	
	struct RankingStats {
		list<double> stats;
	}
	
	struct RankingScoreData {
		uint32 category;
		uint32 score;
		uint8 order;
		uint8 update_mode;
		list<uint8> groups;
		uint64 param;
	}

	method upload_score(RankingScoreData score_data, uint64 unique_id) {}
	
	method delete_score;
	method delete_all_scores;
	method upload_common_data;
	method delete_common_data;
	
	method get_common_data(uint64 unique_id) {
		buffer data;
	}
	
	method change_attributes;
	method change_all_attributes;
	
	method get_ranking(uint8 mode, uint32 category, RankingOrderParam order, uint64 unique_id, pid pid) {
		RankingResult result;
	}
	
	method get_approx_order;
	
	method get_stats(uint32 category, RankingOrderParam order, uint32 flags) {
		RankingStats stats;
	}
	
	method get_ranking_by_pid_list(list<pid> pids, uint8 mode, uint32 category, RankingOrderParam order, uint64 unique_id) {
		RankingResult result;
	}
	
	method get_ranking_by_unique_id_list;
	method get_cached_topx_ranking;
	method get_cached_topx_rankings;
}
